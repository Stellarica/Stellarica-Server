plugins {
	kotlin("jvm") version "1.8.0"
	kotlin("plugin.serialization") version "1.8.0"
	java
	alias(libs.plugins.quilt.loom)
}
group = property("maven_group")!!
version = property("version")!!

repositories {
	maven("https://maven.nucleoid.xyz") // polymer, stimuli
	maven("https://jitpack.io") // mixin extras
	maven("https://ladysnake.jfrog.io/artifactory/mods") // cardinal components
	maven("https://repo.stellarica.net/snapshots")
}

dependencies {
	minecraft(libs.minecraft)
	mappings(variantOf(libs.quilt.mappings) { classifier("intermediary-v2") })
	modImplementation(libs.quilt.loader)
	modImplementation(libs.quilted.fabric.api)
	modImplementation(libs.quilt.kotlin)

	modImplementation(libs.bundles.polymer)
	include(libs.bundles.polymer)

	modImplementation(libs.placeholder)
	include(libs.placeholder)

	modImplementation(libs.sgui)
	include(libs.sgui)

	modImplementation(libs.bundles.cardinal)
	include(libs.bundles.cardinal)

	modImplementation(libs.oxidizer)
	include(libs.oxidizer)

	implementation(libs.kotlin.coroutines)
}

sourceSets {
	// this block is from https://github.com/badasintended/slotlink/blob/1.19/build.gradle.kts
	// as it was more or less the only example i could find of datagen with a kts gradle file
	val main by getting

	val devrun by creating
	val datagen by creating

	listOf(devrun, datagen).forEach {
		it.compileClasspath += main.compileClasspath + main.output
		it.runtimeClasspath += main.runtimeClasspath + main.output
	}

	val generated by creating {
		compiledBy("runDatagen")
		resources {
			srcDir(file("src/generated/output"))
		}
	}

	devrun.apply {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}


loom {
	runs {
		getByName("client") {
			source("devrun")
		}

		getByName("server") {
			source("devrun")
		}
		create("datagen") {
			server()
			name("Data Generation")
			vmArgs(
				"-Dfabric-api.datagen",
				"-Dfabric-api.datagen.output-dir=${file("src/generated/output")}",
				"-Dfabric-api.datagen.modid=slotlink_datagen"
			)
			runDir("build/datagen")
			source("datagen")
		}
	}
}


tasks {

	processResources {
		inputs.property("version", project.version)
		filesMatching("quilt.mod.json") {
			expand(mutableMapOf("version" to project.version))
		}
	}



	getByName("runDatagen") {
		inputs.dir(file("src/datagen"))
		outputs.dir(file("src/generated"))
	}

	getByName("processGeneratedResources") {
		dependsOn("runDatagen")
	}

	jar {
		from(sourceSets["generated"].output) {
			exclude("fabric.mod.json")
			exclude(".cache/**")
		}
		from("LICENSE")
	}

	compileKotlin {
		kotlinOptions.jvmTarget = "17"
	}
}

java {
	withSourcesJar()
}
